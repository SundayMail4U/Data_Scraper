{"version":3,"sources":["./src/app/backend-apis.service.ts","./src/app/twitter/twitter.component.ts","./src/app/twitter/twitter.component.html","./src/environments/environment.ts","./src/app/popup/popup.component.ts","./src/app/popup/popup.component.html","./src/app/reddit/reddit.component.ts","./src/app/reddit/reddit.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {ToastrService} from \"ngx-toastr\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendApisService {\n\n  constructor(private http:HttpClient, private toaster:ToastrService) { }\n\n  response:boolean = false\n  responseUpdated:EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  // getHello():Promise<any>{\n  //   console.log(\"About to\")\n  //   return this.http.get('/auth',{responseType: 'text'}).\n  //   toPromise()\n  //     .then(response => {\n  //       this.response = response as string\n  //       this.responseUpdated.emit(this.response)\n  //     })\n  //   console.log(\"Called API\")\n  // }\n\n  getTwitterData(username:string, followersNumber:string, keyword:string):Promise<any>{\n    return this.http.get('/getTwitterData?user_name=' + username + '&num_of_fol=' + followersNumber + '&keyword=' + keyword, {responseType: 'text'}).\n    toPromise()\n      .then(response => {\n        window.open('http://127.0.0.1:5000/downloadTwitter')\n        this.responseUpdated.emit(false)\n        this.toaster.success('Twitter API successfully returned! Starting download')\n      })\n  }\n\n  getRedditData(subredditTitle:string, sort:string, subredditPostNum:string, authorsPostNumber:string):Promise<any>{\n    return this.http.get('/getRedditData?subreddit_title=' + subredditTitle + '&sort=' + sort + '&subreddit_posts_num=' + subredditPostNum + '&authors_posts_num=' + authorsPostNumber, {responseType: 'text'}).\n    toPromise()\n      .then(response => {\n        window.open('http://127.0.0.1:5000/downloadReddit')\n        this.responseUpdated.emit(false)\n        this.toaster.success('Reddit API successfully returned! Starting download')\n      })\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-twitter',\n  templateUrl: './twitter.component.html',\n  styleUrls: ['./twitter.component.css']\n})\nexport class TwitterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"twitter.component.css\">\n</head>\n<body>\n\n  <h1>HELLOOOOOOOOOOOOOOOOOOOOOOOOOOOO</h1>\n\n</body>\n</html>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-popup',\n  templateUrl: './popup.component.html',\n  styleUrls: ['./popup.component.css']\n})\nexport class PopupComponent implements OnInit {\n\n  @Output() closeEvent:EventEmitter<boolean> = new EventEmitter()\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  close():void{\n    this.closeEvent.emit(true)\n  }\n\n}\n","<div class=\"popup-container\" (click)=\"close()\">\n  <div class=\"display-area fill bg shadow\" (click)=\"$event.stopPropagation()\">\n    <ng-content></ng-content>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reddit',\n  templateUrl: './reddit.component.html',\n  styleUrls: ['./reddit.component.css']\n})\nexport class RedditComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>reddit works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-flask';\n}\n","<app-main></app-main>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule} from \"@angular/forms\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport { TwitterComponent } from './twitter/twitter.component';\nimport { RedditComponent } from './reddit/reddit.component';\nimport { PopupComponent } from './popup/popup.component';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {ToastrModule} from \"ngx-toastr\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent,\n    TwitterComponent,\n    RedditComponent,\n    PopupComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule, // required animations module\n    ToastrModule.forRoot() // ToastrModule added\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {BackendApisService} from \"../backend-apis.service\";\nimport {Subject} from \"rxjs\";\nimport { Router } from '@angular/router';\n\n\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n\n  rows = []\n  name:string = ''\n  twitter = false;\n  reddit = false;\n  loading = false;\n\n  loadingSub:any;\n\n  constructor(private backendApisService:BackendApisService, private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.loadingSub = this.nameSubscription()\n  }\n\n  nameSubscription(){\n    return this.backendApisService.responseUpdated.subscribe((res: boolean) => {\n      this.loading = res\n      console.log(res)\n    })\n  }\n\n  callTwitterAPI(): void {\n\n    this.loading = true;\n\n    let username = (<HTMLInputElement>document.getElementById('twitter-username')).value;\n    let followersNumbers = (<HTMLInputElement>document.getElementById('twitter-followers-number')).value;\n    let keyword = (<HTMLInputElement>document.getElementById('twitter-keyword')).value;\n\n\n    if(username.length < 1 || followersNumbers.length < 1 || keyword.length < 1){\n      window.alert(\"All fields must be provided! Try again.\")\n    }else{\n      this.backendApisService.getTwitterData(username, followersNumbers, keyword)\n    }\n  }\n\n  callRedditAPI(): void {\n\n    this.loading = true;\n\n    let subredditTitle = (<HTMLInputElement>document.getElementById('reddit-subreddit')).value;\n    let sortRadios = (<NodeListOf<HTMLInputElement>>document.getElementsByName('sort'));\n    let sort = '';\n    for(let i = 0;i < sortRadios.length; i++){\n      if(sortRadios[i].checked){\n        sort = sortRadios[i].value\n        break;\n      }\n    }\n    let subredditPostNum = (<HTMLInputElement>document.getElementById('reddit-subreddit-post-number')).value;\n    let authorsPostNumber = (<HTMLInputElement>document.getElementById('reddit-authors-post-number')).value;\n\n\n    if(subredditTitle.length < 1 || subredditPostNum.length < 1 || authorsPostNumber.length < 1){\n      window.alert(\"All fields must be provided! Try again.\")\n    }else{\n      this.backendApisService.getRedditData(subredditTitle, sort, subredditPostNum,authorsPostNumber)\n    }\n  }\n\n  navigateToTwitter(): void{\n    this.twitter = true;\n    this.reddit = false;\n  }\n\n  navigateToReddit(): void{\n    this.twitter = false;\n    this.reddit = true;\n  }\n\n  goBack():void {\n    this.twitter = false;\n    this.reddit = false;\n  }\n}\n","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <link rel=\"stylesheet\" href=\"main.component.css\">\r\n</head>\r\n<body>\r\n\r\n  <h1>SundayMail4U</h1>\r\n\r\n  <div class=\"centerButton\">\r\n    <button id=\"twitter\" (click)=\"navigateToTwitter()\">Twitter</button>\r\n    <button id=\"reddit\" (click)=\"navigateToReddit()\">Reddit</button>\r\n  </div>\r\n</body>\r\n</html>\r\n\r\n\r\n<app-popup *ngIf=\"twitter\">\r\n  <div class=\"popup-division\">\r\n    <div style=\"text-align: left\">\r\n      <button style=\"left: 0; background-color: #f14e4e; color: #d7d4d7; margin-left: 2px; margin-top: 2px\" (click)=\"goBack()\">Back</button>\r\n    </div>\r\n    <h1 class=\"twitter-title\">Twitter Scraping API</h1>\r\n    <form name=\"twitter-form\" action=\"\" method=\"get\">\r\n      <span class=\"twitter-title\">Enter your target username</span>\r\n      <input id=\"twitter-username\" type=\"text\">\r\n      <span class=\"twitter-title\">Enter the desired number of followers to scrape</span>\r\n      <input id=\"twitter-followers-number\" type=\"text\">\r\n      <span class=\"twitter-title\">Enter the keyword to search for</span>\r\n      <input id=\"twitter-keyword\" type=\"text\">\r\n      <button *ngIf=\"!loading\" id=\"submit-twitter\" (click)=\"callTwitterAPI()\">SCRAPE!</button>\r\n      <img *ngIf=\"loading\" src=\"spinner-twitter.gif\">\r\n    </form>\r\n\r\n  </div>\r\n</app-popup>\r\n\r\n\r\n<app-popup *ngIf=\"reddit\">\r\n  <div class=\"popup-division\">\r\n    <div style=\"text-align: left\">\r\n      <button style=\"left: 0; background-color: #4e9af1; color: #d7d4d7; margin-left: 2px; margin-top: 2px\" (click)=\"goBack()\">Back</button>\r\n    </div>\r\n    <h1 class=\"reddit-title\">Reddit Scraping API</h1>\r\n    <form name=\"twitter-form\" action=\"\" method=\"get\">\r\n      <span class=\"reddit-title\">Enter the desired subreddit title</span>\r\n      <input id=\"reddit-subreddit\" type=\"text\">\r\n\r\n      <span class=\"reddit-title\">Select the desired sort</span>\r\n      <div class=\"outer-block-again\">\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortTop\" type=\"radio\" name=\"sort\" value=\"top\" checked=\"checked\">\r\n        <label class=\"reddit-title\" for=\"sortTop\">Top</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortNew\" type=\"radio\" name=\"sort\" value=\"new\">\r\n        <label class=\"reddit-title\" for=\"sortNew\">New</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortHot\" type=\"radio\" name=\"sort\" value=\"hot\" >\r\n        <label class=\"reddit-title\" for=\"sortHot\">Hot</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortControversial\" type=\"radio\" name=\"sort\" value=\"controversial\" >\r\n        <label class=\"reddit-title\" for=\"sortControversial\">Controversial</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortGilded\" type=\"radio\" name=\"sort\" value=\"gilded\" >\r\n        <label class=\"reddit-title\" for=\"sortGilded\">Gilded</label>\r\n        </div>\r\n      </div>\r\n\r\n      <span class=\"reddit-title\">Enter the desired subreddit post number</span>\r\n      <input id=\"reddit-subreddit-post-number\" type=\"text\">\r\n      <span class=\"reddit-title\">Enter the desired authors' post number</span>\r\n      <input id=\"reddit-authors-post-number\" type=\"text\">\r\n\r\n\r\n      <button *ngIf=\"!loading\" id=\"submit-reddit\" (click)=\"callRedditAPI()\">SCRAPE!</button>\r\n      <img *ngIf=\"loading\" src=\"spinner-reddit.gif\">\r\n    </form>\r\n  </div>\r\n</app-popup>\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}