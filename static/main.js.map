{"version":3,"sources":["./src/app/backend-apis.service.ts","./src/app/twitter/twitter.component.ts","./src/app/twitter/twitter.component.html","./src/environments/environment.ts","./src/app/popup/popup.component.ts","./src/app/popup/popup.component.html","./src/app/reddit/reddit.component.ts","./src/app/reddit/reddit.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BackendApisService {\r\n\r\n  constructor(private http:HttpClient, private toaster:ToastrService) { }\r\n\r\n  response:boolean = false\r\n  responseUpdated:EventEmitter<boolean> = new EventEmitter<boolean>()\r\n\r\n  getTwitterData(username:string, followersNumber:string, keyword:string):Promise<any>{\r\n    return this.http.get('/getTwitterData?user_name=' + username + '&num_of_fol=' + followersNumber + '&keyword=' + keyword, {responseType: 'text'}).\r\n    toPromise()\r\n      .then(response => {\r\n        window.open(window.location.href + '/downloadTwitter')\r\n        this.responseUpdated.emit(false)\r\n        this.toaster.success('Twitter API successfully returned! Starting download')\r\n      })\r\n  }\r\n\r\n  getRedditData(subredditTitle:string, sort:string, subredditPostNum:string, authorsPostNumber:string, filename:string):Promise<any>{\r\n    return this.http.get('/getRedditData?subreddit_title=' + subredditTitle + '&sort=' + sort + '&subreddit_posts_num=' + subredditPostNum + '&authors_posts_num=' + authorsPostNumber + '&filename=' + filename, {responseType: 'text'}).\r\n    toPromise()\r\n      .then(response => {\r\n        window.open(window.location.href + '/downloadReddit')\r\n        this.responseUpdated.emit(false)\r\n        this.toaster.success('Reddit API successfully returned! Starting download')\r\n      })\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-twitter',\r\n  templateUrl: './twitter.component.html',\r\n  styleUrls: ['./twitter.component.css']\r\n})\r\nexport class TwitterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <link rel=\"stylesheet\" href=\"twitter.component.css\">\r\n</head>\r\n<body>\r\n\r\n  <h1>HELLOOOOOOOOOOOOOOOOOOOOOOOOOOOO</h1>\r\n\r\n</body>\r\n</html>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-popup',\r\n  templateUrl: './popup.component.html',\r\n  styleUrls: ['./popup.component.css']\r\n})\r\nexport class PopupComponent implements OnInit {\r\n\r\n  @Output() closeEvent:EventEmitter<boolean> = new EventEmitter()\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  close():void{\r\n    this.closeEvent.emit(true)\r\n  }\r\n\r\n}\r\n","<div class=\"popup-container\" (click)=\"close()\">\r\n  <div class=\"display-area fill bg shadow\" (click)=\"$event.stopPropagation()\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-reddit',\r\n  templateUrl: './reddit.component.html',\r\n  styleUrls: ['./reddit.component.css']\r\n})\r\nexport class RedditComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>reddit works!</p>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-flask';\r\n}\r\n","<app-main></app-main>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule} from \"@angular/forms\";\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MainComponent } from './main/main.component';\r\nimport {HttpClientModule} from \"@angular/common/http\";\r\nimport { TwitterComponent } from './twitter/twitter.component';\r\nimport { RedditComponent } from './reddit/reddit.component';\r\nimport { PopupComponent } from './popup/popup.component';\r\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\nimport {ToastrModule} from \"ngx-toastr\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainComponent,\r\n    TwitterComponent,\r\n    RedditComponent,\r\n    PopupComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule, // required animations module\r\n    ToastrModule.forRoot() // ToastrModule added\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {BackendApisService} from \"../backend-apis.service\";\r\nimport {Subject} from \"rxjs\";\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.css']\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n  rows = []\r\n  name:string = ''\r\n  twitter = false;\r\n  reddit = false;\r\n  loading = false;\r\n\r\n  loadingSub:any;\r\n\r\n  constructor(private backendApisService:BackendApisService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadingSub = this.nameSubscription()\r\n  }\r\n\r\n  nameSubscription(){\r\n    return this.backendApisService.responseUpdated.subscribe((res: boolean) => {\r\n      this.loading = res\r\n    })\r\n  }\r\n\r\n  callTwitterAPI(): void {\r\n\r\n\r\n    let username = (<HTMLInputElement>document.getElementById('twitter-username')).value;\r\n    let followersNumbers = (<HTMLInputElement>document.getElementById('twitter-followers-number')).value;\r\n    let keyword = (<HTMLInputElement>document.getElementById('twitter-keyword')).value;\r\n\r\n\r\n    if(username.length < 1 || followersNumbers.length < 1 || keyword.length < 1){\r\n      window.alert(\"All fields must be provided! Try again.\")\r\n    }else{\r\n      this.loading = true;\r\n      this.backendApisService.getTwitterData(username, followersNumbers, keyword)\r\n    }\r\n  }\r\n\r\n  callRedditAPI(): void {\r\n\r\n\r\n    let subredditTitle = (<HTMLInputElement>document.getElementById('reddit-subreddit')).value;\r\n    let sortRadios = (<NodeListOf<HTMLInputElement>>document.getElementsByName('sort'));\r\n    let sort = '';\r\n    for(let i = 0;i < sortRadios.length; i++){\r\n      if(sortRadios[i].checked){\r\n        sort = sortRadios[i].value\r\n        break;\r\n      }\r\n    }\r\n    let subredditPostNum = (<HTMLInputElement>document.getElementById('reddit-subreddit-post-number')).value;\r\n    let authorsPostNumber = (<HTMLInputElement>document.getElementById('reddit-authors-post-number')).value;\r\n    let filename = (<HTMLInputElement>document.getElementById('reddit-filename')).value;\r\n\r\n\r\n    if(subredditTitle.length < 1 || subredditPostNum.length < 1 || authorsPostNumber.length < 1){\r\n      window.alert(\"All fields must be provided! Try again.\")\r\n    }else{\r\n      this.loading = true;\r\n      this.backendApisService.getRedditData(subredditTitle, sort, subredditPostNum,authorsPostNumber, filename)\r\n    }\r\n  }\r\n\r\n  navigateToTwitter(): void{\r\n    this.twitter = true;\r\n    this.reddit = false;\r\n  }\r\n\r\n  navigateToReddit(): void{\r\n    this.twitter = false;\r\n    this.reddit = true;\r\n  }\r\n\r\n  goBack():void {\r\n    this.twitter = false;\r\n    this.reddit = false;\r\n  }\r\n}\r\n","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <link rel=\"stylesheet\" href=\"main.component.css\">\r\n  <link href=\"https://fonts.googleapis.com/css2?family=Bungee&family=Carter+One&family=Fugaz+One&display=swap\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n\r\n  <h1 id=\"title\">Sunday\r\n    <img src=\"/static/images/mail.png\" alt=\"Mail Image\" id=\"mailImg\">\r\n    4U\r\n  </h1>\r\n\r\n  <section class=\"centerDiv\">\r\n    <div id=\"twitter\" (click)=\"navigateToTwitter()\">\r\n      <img src=\"/static/images/twitter-logo.png\" alt=\"Twitter Logo\" id=\"twitterLogo\">\r\n    </div>\r\n\r\n    <div id=\"reddit\" (click)=\"navigateToReddit()\">\r\n      <img src=\"/static/images/reddit-logo.png\" alt=\"Reddit Logo\" id=\"redditLogo\">\r\n    </div>\r\n  </section>\r\n</body>\r\n</html>\r\n\r\n\r\n<app-popup *ngIf=\"twitter\">\r\n  <div class=\"popup-division\">\r\n    <div id=\"popup-button\">\r\n      <button id=\"popup-backButton\" (click)=\"goBack()\">Back</button>\r\n    </div>\r\n    <h1 class=\"twitter-title\">Twitter Scraping API</h1>\r\n    <form name=\"twitter-form\" action=\"\" method=\"get\">\r\n      <span class=\"twitter-title\">Enter your target username</span>\r\n      <input id=\"twitter-username\" type=\"text\">\r\n      <span class=\"twitter-title\">Enter the desired number of followers to scrape</span>\r\n      <input id=\"twitter-followers-number\" type=\"text\">\r\n      <span class=\"twitter-title\">Enter the keyword to search for</span>\r\n      <input id=\"twitter-keyword\" type=\"text\">\r\n      <button *ngIf=\"!loading\" id=\"submit-twitter\" (click)=\"callTwitterAPI()\">SCRAPE!</button>\r\n      <img *ngIf=\"loading\" src=\"/static/spinner-twitter.gif\">\r\n    </form>\r\n  </div>\r\n</app-popup>\r\n\r\n\r\n<app-popup *ngIf=\"reddit\">\r\n  <div class=\"popup-division\">\r\n    <div style=\"text-align: left\">\r\n      <button style=\"left: 0; background-color: #4e9af1; color: #d7d4d7; margin-left: 2px; margin-top: 2px\" (click)=\"goBack()\">Back</button>\r\n    </div>\r\n    <h1 class=\"reddit-title\">Reddit Scraping API</h1>\r\n    <form name=\"twitter-form\" action=\"\" method=\"get\">\r\n      <span class=\"reddit-title\">Enter the desired subreddit title</span>\r\n      <input id=\"reddit-subreddit\" type=\"text\">\r\n\r\n      <span class=\"reddit-title\">Select the desired sort</span>\r\n      <div class=\"outer-block-again\">\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortTop\" type=\"radio\" name=\"sort\" value=\"top\" checked=\"checked\">\r\n        <label class=\"reddit-title\" for=\"sortTop\">Top</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortNew\" type=\"radio\" name=\"sort\" value=\"new\">\r\n        <label class=\"reddit-title\" for=\"sortNew\">New</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortHot\" type=\"radio\" name=\"sort\" value=\"hot\" >\r\n        <label class=\"reddit-title\" for=\"sortHot\">Hot</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortControversial\" type=\"radio\" name=\"sort\" value=\"controversial\" >\r\n        <label class=\"reddit-title\" for=\"sortControversial\">Controversial</label>\r\n        </div>\r\n        <div class=\"block-again\">\r\n          <input class=\"not-centered\" id=\"sortGilded\" type=\"radio\" name=\"sort\" value=\"gilded\" >\r\n        <label class=\"reddit-title\" for=\"sortGilded\">Gilded</label>\r\n        </div>\r\n      </div>\r\n\r\n      <span class=\"reddit-title\">Enter the desired subreddit post number</span>\r\n      <input id=\"reddit-subreddit-post-number\" type=\"text\">\r\n      <span class=\"reddit-title\">Enter the desired authors' post number</span>\r\n      <input id=\"reddit-authors-post-number\" type=\"text\">\r\n      <span class=\"reddit-title\">Enter the desired filename</span>\r\n      <input id=\"reddit-filename\" type=\"text\">\r\n\r\n\r\n      <button *ngIf=\"!loading\" id=\"submit-reddit\" (click)=\"callRedditAPI()\">SCRAPE!</button>\r\n      <img *ngIf=\"loading\" src=\"/static/spinner-reddit.gif\">\r\n    </form>\r\n  </div>\r\n</app-popup>\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}